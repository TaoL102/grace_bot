using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Linq;
using System.Threading.Tasks;
using GraceBot.Models;
using Microsoft.Bot.Connector;

namespace GraceBot
{
    public class DbManager : IDbManager
    {
        GraceBotContext _db;

        // constructor 
        public DbManager(GraceBotContext db)
        {
            _db = db;
        }
        
        // Implement the method defined in IDbManager interface.
        // Add an activity in database as an asynchronous operation when the activity is generated by the bot.
        public async Task AddActivity(Activity activity, ProcessStatus processStatus = ProcessStatus.BotMessage)
        {
            if (activity == null)
                throw new ArgumentNullException("activity cannot be null");
            if (activity.Id == null)
            {
                if (activity.ReplyToId == null)
                    throw new InvalidOperationException("Activity.Id and Activity.ReplyToId cannot both be null.");
                if (processStatus != ProcessStatus.BotMessage)
                    throw new InvalidOperationException("Activity.Id can be null only when processStatus equals to BotMessage");
            }

            var activityModel = ConvertToModel(activity, processStatus);
            AttachReference(activityModel);
            _db.Activities.Add(activityModel);
            await _db.SaveChangesAsync();

        }

        // Implement the method defined in IDbManager interface.
        // Update an activity in database as an asynchronous operation given the activity and its process status.
        public async Task UpdateActivity(Activity activity, ProcessStatus? processStatus = null)
        {
            if (activity == null)
                throw new ArgumentNullException("activity cannot be null.");
            var oldRecord = _db.Activities.SingleOrDefault(o => o.ActivityId.Equals(activity.Id));            
            if(oldRecord != null)
            {
                oldRecord.ActivityId = activity.Id;
                oldRecord.Text = activity.Text;
                oldRecord.Type = activity.Type;
                oldRecord.ServiceUrl = activity.ServiceUrl;
                oldRecord.Timestamp = activity.Timestamp;
                oldRecord.ChannelId = activity.ChannelId;
                oldRecord.From = activity.From;
                oldRecord.Conversation = activity.Conversation;
                oldRecord.Recipient = activity.Recipient;
                oldRecord.ReplyToId = activity.ReplyToId;

                oldRecord.ProcessStatus = processStatus ?? oldRecord.ProcessStatus;
                AttachReference(oldRecord);
                await _db.SaveChangesAsync();
            }
            else throw new DataException("No matching Activity record is found.");
        }


        private void AttachReference(ActivityModel activityModel)
        {
            // Check if duplicate key in channelAccount and conversationAccount
            if (activityModel.From != null)
            {
                var channelAccountFrom = _db.ChannelAccounts.Find(activityModel.From.Id);
                if (channelAccountFrom != null)
                {
                    _db.ChannelAccounts.Attach(channelAccountFrom);
                    activityModel.From = channelAccountFrom;
                }
            }

            if (activityModel.Recipient != null)
            {
                var channelRecipient = _db.ChannelAccounts.Find(activityModel.Recipient.Id);
                if (channelRecipient != null)
                {
                    _db.ChannelAccounts.Attach(channelRecipient);
                    activityModel.Recipient = channelRecipient;
                }
            }

            if (activityModel.Conversation != null)
            {
                var conversationAccount = _db.ConversationAccounts.Find(activityModel.Conversation.Id);
                if (conversationAccount != null)
                {
                    _db.ConversationAccounts.Attach(conversationAccount);
                    activityModel.Conversation = conversationAccount;
                }
            }
        }


        // Implement the method defined in IDbManager interface.
        // Return a list of activities in database (5 contiguous ones from the start) which stand for unprocessed questions.
        public List<Activity> FindUnprocessedQuestions(int amount)
        {
            if (amount < 1)
                throw new ArgumentOutOfRangeException("amount cannot be less than 1.");
            var extendedActivities = _db.Activities.Include(r => r.From).Include(r => r.Recipient).Include(r => r.Conversation).Where(o => o.ProcessStatus == ProcessStatus.Unprocessed).Take(amount).ToList();
            var activities = new List<Activity>();
            foreach (var ea in extendedActivities)
            {
                activities.Add(ConvertToActivity(ea));
            }
            return activities;
        }


        // Implement the method defined in IDbManager interface.
        // Return an activity (if found in database) given the ID.
        public Activity FindActivity(string id)
        {
            var activityRecord = _db.Activities.Include(r => r.From).Include(r => r.Recipient)
                .Include(r => r.Conversation).FirstOrDefault(o => o.ActivityId == id);
            if (activityRecord == null) return null;
            return ConvertToActivity(activityRecord);
        }


        // Return an activityModel given an activity and its process status.
        internal static ActivityModel ConvertToModel(Activity activity, ProcessStatus? processStatus = null)
        {
            var model = new ActivityModel(activity);
            if (processStatus != null)
                model.ProcessStatus = (ProcessStatus)processStatus;
            return model;
        }


        // Return an activity given an activityModel.
        internal static Activity ConvertToActivity(ActivityModel activityModel)
        {
            return new Activity()
            {
                Id = activityModel.ActivityId,
                Text = activityModel.Text,
                Type = activityModel.Type,
                ServiceUrl = activityModel.ServiceUrl,
                Timestamp = activityModel.Timestamp,
                ChannelId = activityModel.ChannelId,
                From = activityModel.From,
                Conversation = activityModel.Conversation,
                Recipient = activityModel.Recipient,
                ReplyToId = activityModel.ReplyToId
            };
        }
    }
}